
tc n sc 1

bool isBalanced(string exp)
{
 
    // Initialising Variables
    bool flag = true;
    int count = 0;
 
    // Traversing the Expression
    for (int i = 0; i < exp.length(); i++) {
 
        if (exp[i] == '(') {
            count++;
        }
        else {
 
            // It is a closing parenthesis
            count--;
        }
        if (count < 0) {
 
            // This means there are
            // more Closing parenthesis
            // than opening ones
            flag = false;
            break;
        }
    }
 
    // If count is not zero,
    // It means there are
    // more opening parenthesis
    if (count != 0) {
        flag = false;
    }
 
    return flag;
}
 


valid paranthesis

bool isValid(string s) {
     
         stack<char>st;
        
        for(int i=0; s[i]!='\0';i++)
        {
            if(s[i] == ')')
            {
                if(st.empty() || st.top()!= '(')
                 return false;
                st.pop();
             
            }
            
            else if(s[i] == '}')
            {
                if(st.empty() || st.top()!= '{')
                 return false;
                st.pop();
             
            }
            
            else if(s[i] == ']')
            {
                if(st.empty() || st.top()!= '[')
                 return false;
                st.pop();
             
            }
            
            else
              st.push(s[i]);
        }
        return st.empty()?true : false;
        
        
        
    }       