
tc n2 sc 1
vector<vector<int>> threeSum(vector<int>& nums) {
        
   
        vector<vector<int>>res;
        sort(nums.begin(),nums.end());
        int j=0;
        int k=0;
        int n = nums.size();
        for(int i=0;i<n-2;i++)
        {
            if(i>0 && nums[i]==nums[i-1]) continue;
            j=i+1;
            k=n-1;
            while(j<k)
            {
                int sum = nums[i]+nums[j]+nums[k];
                if(sum==0)
                {
                    res.push_back({nums[i],nums[j],nums[k]});
                    
                    while(j<k && nums[j]==nums[j+1]) j++;
                    
                    while(j<k && nums[k]==nums[k-1]) k--;
                    
                    j++;
                    k--;
                }
                
                if(sum>0)
                    k--;
                
                if(sum<0)
                    j++;
            }
            
        }
        
       return res; 
        
    }


tc n3 sc 1

bool find3Numbers(int A[], int arr_size, int sum)
{
    // Fix the first element as A[i]
    for (int i = 0; i < arr_size - 2; i++)
    {
 
        // Fix the second element as A[j]
        for (int j = i + 1; j < arr_size - 1; j++)
        {
 
            // Now look for the third number
            for (int k = j + 1; k < arr_size; k++)
            {
                if (A[i] + A[j] + A[k] == sum)
                {
                    cout << "Triplet is " << A[i] <<
                        ", " << A[j] << ", " << A[k];
                    return true;
                }
            }
        }
    }
 
    // If we reach here, then no triplet was found
    return false;
}