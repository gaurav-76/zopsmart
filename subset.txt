// tc 2n  sc n


// Recursive program to generate power set
/*
Input :  set = "abc"
Output : "", "a", "b", "c", "ab", "ac", "bc", "abc"

Input : set = "abcd"
Output : "" "a" "ab" "abc" "abcd" "abd" "ac" "acd"
         "ad" "b" "bc" "bcd" "bd" "c" "cd" "d"

// Subsets of array
Input :
array = {1, 2, 3}
Output :
// this space denotes null element.
1
1 2
1 2 3
1 3
2
2 3
3

*/

#include<bits/stdc++.h>

using namespace std;

// Striver Approach
void solve(int index, string s, vector<string>&res, string ds)
{
  if(index==s.length())
  {
    if(ds.length()==0)
    {
      res.push_back("{}" );
    }
    else res.push_back(ds);
    return;
  }


    ds.push_back(s[index]);
    solve(index+1,s,res,ds);
    ds.pop_back();
    solve(index+1,s,res,ds);


}

//Aditya Verma
void solve1(string ip, string op,vector<string>&res)
{
  if(ip.length()==0)
  {
    if(op.length()==0)
    {
      res.push_back("{}" );
    }
    else res.push_back(op);
    return;
  }
    string op1 = op;
    string op2 = op;

    op1.push_back(ip[0]);
    ip.erase(ip.begin()+0);

    solve1(ip,op1,res);
    solve1(ip,op2,res);
  }

}

int main()
{
  string s;
  cout<<"Enter string : ";
  cin>>s;

  vector<string>res;
  string ds="";

//solve(0,s,res,ds);
    solve1(s,ds,res);
  for(int i=0;i<res.size();i++)
  {
    cout<<" "<<res[i]<<endl;
  }
}
