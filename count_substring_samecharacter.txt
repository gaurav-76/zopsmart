


tc n2 sc 1

int checkEquality(string s)
{
    return (s[0] == s[s.size() - 1]);
}
 
int countSubstringWithEqualEnds(string s)
{
    int result = 0;
    int n = s.length();
 
    // Starting point of substring
    for (int i = 0; i < n; i++)
 
       // Length of substring
       for (int len = 1; len <= n-i; len++)
 
          // Check if current substring has same
          // starting and ending characters.
          if (checkEquality(s.substr(i, len)))
            result++;
 
    return result;
}



// print all substring


tc n2 sc n

void printSubstrings(string str)
{
 
    // First loop for starting index
    for (int i = 0; i < str.length(); i++) {
        string subStr;
        // Second loop is generating sub-string
        for (int j = i; j < str.length(); j++) {
            subStr += str[j];
            cout << subStr << endl;
        }
    }
}



tc n3 sc 1

void subString(string s, int n)
{
    // Pick starting point in outer loop
    // and lengths of different strings for
    // a given starting point
    for (int i = 0; i < n; i++)
        for (int len = 1; len <= n - i; len++)
            cout << s.substr(i, len) << endl;
}



tc n3 sc 1

void subString(char str[], int n)
{
    // Pick starting point
    for (int len = 1; len <= n; len++)
    {   
        // Pick ending point
        for (int i = 0; i <= n - len; i++)
        {
            //  Print characters from current
            // starting point to current ending
            // point. 
            int j = i + len - 1;           
            for (int k = i; k <= j; k++)
                cout << str[k];
             
            cout << endl;
        }
    }
}